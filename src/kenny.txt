#include "main.h"
#include "lemlib/api.hpp" // IWYU pragma: keep
#include "liblvgl/llemu.hpp"
#include "pros/abstract_motor.hpp"
#include "pros/motors.h"
#include "pros/optical.hpp"
#include "pros/screen.hpp"

pros::Controller master(pros::E_CONTROLLER_MASTER);
// pros::Motor LEFT_MIDDLE(-7, pros::v5::MotorGears::blue);
// pros::Motor LEFT_FRONT(-5, pros::v5::MotorGears::blue);
// pros::Motor LEFT_BACK(-4, pros::v5::MotorGears::blue);
// pros::Motor RIGHT_MIDDLE(12, pros::v5::MotorGears::blue);
// pros::Motor RIGHT_FRONT(6, pros::v5::MotorGears::blue);
// pros::Motor RIGHT_BACK(8, pros::v5::MotorGears::blue);

pros::MotorGroup left_motors({-7, -5, -4}, pros::MotorGearset::blue); // motors use 600 RPM cartridges
pros::MotorGroup right_motors({12, 6, 8}, pros::MotorGearset::blue); 
pros::Imu inertial(13);
pros::Optical optical(14);

lemlib::Drivetrain drivetrain(
	&left_motors, // left motor group
	&right_motors, // right motor group
	11.3, // track width
	lemlib::Omniwheel::NEW_325, // using new 3.25" omnis
	450, // drivetrain rpm is 450
	2 // horizontal drift is 2 (for now)
);

// lateral PID controller
lemlib::ControllerSettings lateral_controller(10, // proportional gain (kP)
											0, // integral gain (kI)
											3, // derivative gain (kD)
											3, // anti windup
											1, // small error range, in inches
											100, // small error range timeout, in milliseconds
											3, // large error range, in inches
											500, // large error range timeout, in milliseconds
											20 // maximum acceleration (slew)
);

// angular PID controller
lemlib::ControllerSettings angular_controller(2, // proportional gain (kP)
											0, // integral gain (kI)
											10, // derivative gain (kD)
											3, // anti windup
											1, // small error range, in degrees
											100, // small error range timeout, in milliseconds
											3, // large error range, in degrees
											500, // large error range timeout, in milliseconds
											0 // maximum acceleration (slew)
);

lemlib::OdomSensors sensors(nullptr, nullptr, nullptr, nullptr, &inertial);

lemlib::Chassis chassis(drivetrain, lateral_controller, angular_controller, sensors);


pros::Motor intakeLeft(10, pros::v5::MotorGears::green);
pros::Motor intakeRight(-2, pros::v5::MotorGears::green);
pros::Motor armLeft(9, pros::v5::MotorGears::green);
pros::Motor armRight(-3, pros::v5::MotorGears::green);


void armRaise(int degrees, int direction, int speed){// 0 = move arm up, > 0 = move for seconds
	if(direction == 0){
		armLeft.move_absolute(degrees, speed);
		armRight.move_absolute(degrees, speed);
	}
	else{
		armLeft.move_velocity(-speed);
		armRight.move_velocity(-speed);
		pros::delay(direction);
		armLeft.move_velocity(0);
		armRight.move_velocity(0);
	}
}	

void spinIntake(){
	intakeLeft.move_velocity(200);
	intakeRight.move_velocity(200);	
}

void outtake(){
	intakeLeft.move_velocity(-200);
	intakeRight.move_velocity(-200);	
}

void spinBottom(){
	intakeLeft.move_velocity(0);
	intakeRight.move_velocity(200);
}

void stopIntake(){
	intakeLeft.move_velocity(0);
	intakeRight.move_velocity(0);
}

pros::adi::DigitalOut clamp('A');
pros::adi::DigitalOut claw('B');
pros::adi::DigitalOut doinker('C');

/**
 * A callback function for LLEMU's center button.
 *
 * When this callback is fired, it will toggle line 2 of the LCD text between
 * "I was pressed!" and nothing.
 */
void on_center_button() {
	static bool pressed = false;
	pressed = !pressed;
	if (pressed) {
		pros::lcd::set_text(2, "I was pressed!");
	} else {
		pros::lcd::clear_line(2);
	}
}

/**
 * Runs initialization code. This occurs as soon as the program is started.
 *
 * All other competition modes are blocked by initialize; it is recommended
 * to keep execution time for this mode under a few seconds.
 */
void initialize() {
	chassis.calibrate();
	pros::lcd::initialize();
}

/**
 * Runs while the robot is in the disabled state of Field Management System or
 * the VEX Competition Switch, following either autonomous or opcontrol. When
 * the robot is enabled, this task will exit.
 */
void disabled() {}

/**
 * Runs after initialize(), and before autonomous when connected to the Field
 * Management System or the VEX Competition Switch. This is intended for
 * competition-specific initialization routines, such as an autonomous selector
 * on the LCD.
 *
 * This task will exit when the robot is enabled and autonomous or opcontrol
 * starts.
 */
void competition_initialize() {}

/**
 * Runs the user autonomous code. This function will be started in its own task
 * with the default priority and stack size whenever the robot is enabled via
 * the Field Management System or the VEX Competition Switch in the autonomous
 * mode. Alternatively, this function may be called in initialize or opcontrol
 * for non-competition testing purposes.
 *
 * If the robot is disabled or communications is lost, the autonomous task
 * will be stopped. Re-enabling the robot will restart the task, not re-start it
 * from where it left off.
 */

void rightBlue(){
	spinBottom();
	claw.set_value(true);
	chassis.setPose(0, 0, 0);

	chassis.moveToPose(-5, -12, 93, 3500, { .forwards = false, .minSpeed = 50}, true);

	//scoring on the alliance stake
	armRaise(600, 0, 60);
	chassis.moveToPose(2, -12, 93, 1000, {}, false);
	
	armRaise(0, 10 s00, 200);

	//drive toward mogo
	chassis.moveToPoint(-4, -12.5, 2000, {.forwards = false, .minSpeed = 70}, false);

	claw.set_value(false);
	pros::delay(100);
	chassis.moveToPose(-40, 20, 132, 3000, {.forwards = false, .minSpeed = 50}, false);
	clamp.set_value(true);
	pros::delay(200);

	chassis.turnToHeading(0, 1000);
	spinIntake();
	chassis.moveToPose(-40, 40, 0, 3000, {.minSpeed = 50});
	pros::delay(700);

	chassis.turnToHeading(-90, 1000);
	chassis.moveToPoint(-50, 35, 1000, {.minSpeed = 50});
	pros::delay(1000);

	chassis.moveToPose(-30, 20,- 35, 2000, {.forwards = false, .minSpeed = 50});
	armRaise(700, 0, 200);
	chassis.moveToPose(-50, 0, -140, 2000, {.minSpeed = 50}, false);
	armRaise(0, 1000, 100);
}

void rightBlueRisk(){
	spinBottom();
	claw.set_value(true);
	chassis.setPose(0, 0, 0);

	chassis.moveToPose(-5, -12, 93, 3500, { .forwards = false, .minSpeed = 50}, true);

	//scoring on the alliance stake
	armRaise(600, 0, 60);
	chassis.moveToPose(2, -12, 93, 1000, {}, false);
	
	armRaise(0, 1000, 200);

	//drive toward mogo
	chassis.moveToPoint(-4, -12.5, 2000, {.forwards = false, .minSpeed = 70}, false);

	claw.set_value(false);
	pros::delay(100);
	chassis.moveToPose(-40, 20, 132, 3000, {.forwards = false, .minSpeed = 50}, false);
	clamp.set_value(true);
	pros::delay(200);

	chassis.turnToHeading(0, 1000);
	spinIntake();
	chassis.moveToPose(-40, 40, 0, 3000, {.minSpeed = 50});
	pros::delay(700);

	chassis.turnToHeading(-90, 1000);
	chassis.moveToPoint(-50, 37, 1000, {.minSpeed = 50});
	pros::delay(1000);

	chassis.moveToPose(-35, 20, 45, 2000, {.forwards = false, .minSpeed = 50});
	chassis.moveToPoint(10, 60, 2000, {.maxSpeed = 70, .minSpeed = 50});
	pros::delay(1000);
	chassis.moveToPoint(-30, 20, 1500, {.forwards = false, .maxSpeed = 70});

	
	chassis.turnToHeading(-135, 1000);
	armRaise(700, 0, 200);
	chassis.moveToPose(-55, -5, -140, 1500, {.minSpeed = 50}, false);
	armRaise(0, 1000, 100);
}

void rightBlueNoAllianceStake(){
	chassis.setPose(0, 20, 0);
	chassis.turnToHeading(50, 1000);
	chassis.moveToPoint(-32, 6, 2000, {.forwards = false, .maxSpeed = 70}, false);
	clamp.set_value(true);
	pros::delay(200);

	chassis.turnToHeading(0, 1000);
	spinIntake();
	chassis.moveToPose(-32, 32, 0, 3000, {.minSpeed = 50});
	pros::delay(700);

	chassis.turnToHeading(-90, 1000);
	chassis.moveToPoint(-42, 27, 1000, {.minSpeed = 50});
	pros::delay(1000);

	chassis.moveToPose(-35, 0, 45, 2000, {.forwards = false, .minSpeed = 50});
	chassis.moveToPoint(10, 60, 2000, {.maxSpeed = 70, .minSpeed = 50});
	pros::delay(1000);
	chassis.moveToPoint(-30, 20, 1500, {.forwards = false, .maxSpeed = 50});

	
	chassis.turnToHeading(-135, 1000);
	armRaise(700, 0, 200);
	chassis.moveToPose(-52, -20, -140, 1500, {.minSpeed = 50}, false);
	armRaise(0, 1000, 100);
}

void leftBlue(){
	claw.set_value(true);
	spinBottom();
	chassis.setPose(0, 0, 0);

	chassis.moveToPose(5, -12, -92, 3500, { .forwards = false, .minSpeed = 50}, true);

	//scoring on the alliance stake
	armRaise(600, 0, 60);
	chassis.moveToPose(-4, -12, -92, 1000, {}, false);
	
	armRaise(0, 1000, 200);

	//drive toward mogo
	chassis.moveToPoint(4, -12.5, 2000, {.forwards = false, .minSpeed = 70}, false);

	claw.set_value(false);
	pros::delay(100);
	chassis.moveToPose(37, 11, -120, 3000, {.forwards = false, .minSpeed = 70}, false);
	clamp.set_value(true);
	pros::delay(200);

	chassis.moveToPoint(30, 18, 1000);

	chassis.turnToHeading(0, 1000);
	spinIntake();
	chassis.moveToPose(32, 25, 0, 1500, {.minSpeed = 70});

	chassis.turnToHeading(-70, 1000);

	chassis.moveToPoint(10, 40, 2000);

	chassis.moveToPoint(-10, 50, 1500, {.maxSpeed = 70, .minSpeed = 50});
	pros::delay(500);
	chassis.moveToPose(20, 10, 35, 1500, {.forwards = false, .minSpeed = 50});

	armRaise(700, 0, 200);
	chassis.moveToPose(47, 0, 140, 1500, {.minSpeed = 50}, false);
	armRaise(0, 1000, 100);
}	

void leftBlueNoAllianceStake(){
	chassis.setPose(0, 0, 0);

	chassis.moveToPose(0, -33, 0, 1300, {.forwards = false}, false);
	clamp.set_value(true);
	pros::delay(500);
	spinIntake();
	chassis.turnToHeading(60, 1000);
	chassis.moveToPose(25, -20, 60, 2000, {.minSpeed = 50});
	pros::delay(1000);
	chassis.moveToPose(0, -30, 180, 3000, {.forwards = false}, true);
	armRaise(700, 0, 200);
	chassis.moveToPose(0, -50, 180, 2000, {}, false);
	armRaise(0, 1000, 200);
}


void leftRed(){
	spinBottom();
	claw.set_value(true);
	chassis.setPose(0, 0, 0);

	chassis.moveToPose(5, -12, -93, 3500, { .forwards = false, .minSpeed = 50}, true);

	//scoring on the alliance stake
	armRaise(600, 0, 60);
	chassis.moveToPose(-2, -12, -93, 1000, {}, false);
	
	armRaise(0, 1000, 200);

	//drive toward mogo
	chassis.moveToPoint(4, -12.5, 2000, {.forwards = false, .minSpeed = 70}, false);

	claw.set_value(false);
	pros::delay(100);
	chassis.moveToPose(40, 16, -132, 3000, {.forwards = false, .minSpeed = 50}, false);
	clamp.set_value(true);
	pros::delay(200);

	chassis.turnToHeading(0, 1000);
	spinIntake();
	chassis.moveToPose(30, 33, 0, 3000, {.minSpeed = 50});
	pros::delay(700);

	chassis.turnToHeading(90, 1000);
	chassis.moveToPose(45, 31, 105, 1000, {.minSpeed = 50});
	pros::delay(1000);

	chassis.moveToPose(30, 20, 35, 2000, {.forwards = false, .minSpeed = 50});
	armRaise(700, 0, 200);
	chassis.moveToPose(50, 0, 140, 2000, {.minSpeed = 50}, false);
	armRaise(0, 1000, 100);
}

void leftRedRisk(){
	spinBottom();
	claw.set_value(true);
	chassis.setPose(0, 0, 0);

	chassis.moveToPose(5, -12, -93, 3500, { .forwards = false, .minSpeed = 50}, true);

	//scoring on the alliance stake
	armRaise(600, 0, 60);
	chassis.moveToPose(-2, -12, -93, 1000, {}, false);
	
	armRaise(0, 1000, 200);

	//drive toward mogo
	chassis.moveToPoint(4, -12.5, 2000, {.forwards = false, .minSpeed = 70}, false);

	claw.set_value(false);
	pros::delay(100);
	chassis.moveToPose(40, 16, -132, 3000, {.forwards = false, .minSpeed = 50}, false);
	clamp.set_value(true);
	pros::delay(200);

	chassis.turnToHeading(0, 1000);
	spinIntake();
	chassis.moveToPose(30, 33, 0, 3000, {.minSpeed = 50});
	pros::delay(700);

	chassis.turnToHeading(90, 1000);
	chassis.moveToPose(45, 31, 105, 1000, {.minSpeed = 50});
	pros::delay(1000);

	chassis.moveToPose(30, 10, -45, 2000, {.forwards = false, .minSpeed = 50});
	chassis.moveToPoint(-10, 50, 2000, {.maxSpeed = 100, .minSpeed = 50});
	pros::delay(1000);
	chassis.moveToPoint(10, 20, 1000, {.forwards = false});
	chassis.turnToHeading(135, 1000);
	armRaise(700, 0, 200);
	chassis.moveToPose(50, -10, 140, 1000, {.minSpeed = 50}, false);
	armRaise(0, 1000, 100);
}

void leftRedNoAllianceStake(){
	chassis.setPose(0, 20, 0);
	chassis.turnToHeading(-50, 1000);
	chassis.moveToPoint(35, 0, 2000, {.forwards = false, .maxSpeed = 70}, false);
	clamp.set_value(true);
	pros::delay(200);

	chassis.turnToHeading(0, 1000);
	spinIntake();
	chassis.moveToPose(30, 33, 0, 3000, {.minSpeed = 50});
	pros::delay(700);

	chassis.turnToHeading(90, 1000);
	chassis.moveToPose(45, 31, 105, 1000, {.minSpeed = 50});
	pros::delay(1000);

	chassis.moveToPose(30, 10, -45, 2000, {.forwards = false, .minSpeed = 50});
	chassis.moveToPoint(-10, 50, 2000, {.maxSpeed = 70, .minSpeed = 50});
	pros::delay(1000);
	chassis.moveToPoint(10, 20, 1000, {.forwards = false});
	chassis.turnToHeading(135, 1000);
	armRaise(700, 0, 200);
	chassis.moveToPose(50, -10, 140, 1000, {.minSpeed = 50}, false);
	armRaise(0, 1000, 100);
}

void rightRed(){
	claw.set_value(true);
	spinBottom();
	chassis.setPose(0, 0, 0);

	chassis.moveToPose(-5, -12, 92, 3500, { .forwards = false, .minSpeed = 50}, true);

	//scoring on the alliance stake
	armRaise(600, 0, 60);
	chassis.moveToPose(4, -12, 92, 1000, {}, false);
	
	armRaise(0, 1000, 200);

	//drive toward mogo
	chassis.moveToPoint(-4, -12.5, 2000, {.forwards = false, .minSpeed = 70}, false);

	claw.set_value(false);
	pros::delay(100);
	chassis.moveToPose(-35, 18, 132, 3000, {.forwards = false, .minSpeed = 70}, false);
	clamp.set_value(true);
	pros::delay(200);

	chassis.moveToPoint(-30, 18, 1000);

	chassis.turnToHeading(0, 1500);
	spinIntake();
	chassis.moveToPose(-38, 30, 0, 3000, {.minSpeed = 70});
	pros::delay(1000);

	chassis.turnToHeading(70, 1000);

	chassis.moveToPose(-10, 60, 90, 2000);

	chassis.moveToPoint(10, 65, 1500, {.maxSpeed = 70, .minSpeed = 50});
	pros::delay(500);
	chassis.moveToPose(-30, 10, -35, 1500, {.forwards = false, .minSpeed = 50});

	armRaise(700, 0, 200);
	chassis.moveToPose(-47, 0, -140, 1500, {.minSpeed = 50}, false);
	armRaise(0, 1000, 100);
}

void rightRedNoAllianceStake(){
	chassis.setPose(0, 0, 0);

	chassis.moveToPose(0, -33, 0, 1300, {.forwards = false}, false);
	clamp.set_value(true);
	pros::delay(500);
	spinIntake();
	chassis.turnToHeading(-60, 1000);
	chassis.moveToPose(-25, -20, -60, 2000, {.minSpeed = 50});
	pros::delay(1000);
	chassis.moveToPose(0, -30, -180, 3000, {.forwards = false}, true);
	armRaise(700, 0, 200);
	chassis.moveToPose(0, -50, -180, 2000, {}, false);
	armRaise(0, 1000, 200);
}

void skills(){
	chassis.setPose(0, 0, 0);
	claw.set_value(true);
	spinIntake();

	armRaise(600, 0, 60);
	pros::delay(700);
	chassis.moveToPose(0, 7, 0, 1000, {}, false);
	armRaise(0, 1000, 200);
	chassis.moveToPose(0, -5, 0, 1000, {.forwards = false}, false);
	chassis.turnToHeading(-90, 1500);
	claw.set_value(false);
	chassis.moveToPoint(25, -7, 1500, {.forwards = false, .maxSpeed = 50}, false);

	clamp.set_value(true);
	chassis.turnToHeading(93, 1500, {.maxSpeed = 70});
	chassis.moveToPoint(65, -7, 3000, {.maxSpeed = 50, .minSpeed = 50});
	pros::delay(1000);

	chassis.moveToPoint(55, -6, 1000, {.forwards = false});

	chassis.moveToPose(55, -35, 180, 1500, {.minSpeed = 40});
	chassis.moveToPose(54, -104, 180, 3000, {.minSpeed = 50}, false); // far red
	pros::delay(200);
	chassis.moveToPose(79, 30, 200, 2500, {.forwards = false}, false);
	clamp.set_value(false);
	armRaise(0, 500, 200);
	chassis.moveToPose(25, -30, -90, 2000, {.minSpeed = 50}, false);
	pros::delay(300);
	stopIntake();
	chassis.turnToHeading(180, 1500, {.maxSpeed = 50});
	chassis.moveToPose(-23, -4.5, 90, 3000, {.forwards = false, .minSpeed = 50}, false);
	clamp.set_value(true);
	pros::delay(300);
	chassis.turnToHeading(-90, 1500, {.maxSpeed = 70});
	spinIntake();
	chassis.moveToPoint(-52, -8, 3000, {.maxSpeed = 50, .minSpeed = 50});
	pros::delay(1000);
	chassis.moveToPoint(-40, -10, 1000, {.forwards = false});
	chassis.turnToHeading(180, 1500, {.maxSpeed = 70});
	chassis.moveToPoint(-41, -70, 3000, {.maxSpeed = 50, .minSpeed = 50}, false); // far red
	pros::delay(1000);
	chassis.moveToPose(-50, 38, 160, 1000, {.forwards = false}, false);
	pros::delay(800);
	clamp.set_value(false);	
	chassis.moveToPose(-65, 40, 160, 1500, {.forwards = false}, false);

	chassis.moveToPoint(-25, -90, 3000, {.maxSpeed = 100});
	chassis.turnToHeading(0, 1000);
	chassis.moveToPoint(-23, -110, 1000, {.forwards = false}, false);
	clamp.set_value(true);
	chassis.moveToPoint(-25, -100, 1000);
	chassis.turnToHeading(60, 1000, {}, false);
	clamp.set_value(false); // drop blue
	chassis.moveToPoint(-63, -115, 1500, {.forwards = false}, false); // push corner
	pros::delay(1000);

	chassis.moveToPoint(-30, -100, 3000, {.maxSpeed = 100});
	chassis.turnToHeading(-90, 1500, {.maxSpeed = 50});
	chassis.moveToPose(0, -103, -90, 2000, {.forwards = false, .minSpeed = 50}, false);
	clamp.set_value(true);
	pros::delay(500);
	spinIntake();
	chassis.moveToPoint(-43, -100, 3000, {.maxSpeed = 70, .minSpeed = 70}, false);
	pros::delay(300);
	chassis.moveToPose(-40, -80, 180, 2000, {.forwards = false, .minSpeed = 70}, false);
	pros::delay(1000);
	clamp.set_value(false);
	chassis.turnToHeading(90, 1000);
	
	chassis.moveToPoint(-40, -90, 1000);
	armRaise(500, 0, 200);
	doinker.set_value(true);
	chassis.turnToHeading(90, 1000, {.maxSpeed = 50});
	chassis.moveToPoint(0, -107,2000, {}, false);
	chassis.moveToPoint(90, -140, 2000, {});
	doinker.set_value(false);
	chassis.moveToPoint(50, -140, 3000, {.forwards = false, .minSpeed = 100});
	
}

void autonomous() {
	// rightBlue();
	// rightBlueRisk();
	// rightBlueNoAllianceStake();
	// leftBlue();
	// leftBlueNoAllianceStake();

	// leftRed();
	// leftRedRisk();
	// leftRedNoAllianceStake();

	rightRed();
	// rightRedNoAllianceStake();

	// skills();
}

/**
 * Runs the operator control code. This function will be started in its own task
 * with the default priority and stack size whenever the robot is enabled via
 * the Field Management System or the VEX Competition Switch in the operator
 * control mode.
 *
 * If no competition control is connected, this function will run immediately
 * following initialize().
 *
 * If the robot is disabled or communications is lost, the
 * operator control task will be stopped. Re-enabling the robot will restart the
 * task, not resume it from where it left off.
 */
void opcontrol() {
	pros::Controller master(pros::E_CONTROLLER_MASTER);
	
	left_motors.set_brake_mode(pros::E_MOTOR_BRAKE_BRAKE);
	right_motors.set_brake_mode(pros::E_MOTOR_BRAKE_BRAKE);
	armLeft.set_brake_mode(pros::E_MOTOR_BRAKE_HOLD);
	armRight.set_brake_mode(pros::E_MOTOR_BRAKE_HOLD);
	
	bool clampToggle = false;
	bool clawToggle = false;
	bool doinkerToggle = false;
	bool colorSort = false;
	optical.set_led_pwm(100);
	while(true){
		// double thing = optical.get_hue();
		// pros::c::screen_print(pros::E_TEXT_LARGE, 3, "%lf", thing);
		left_motors.move_velocity((master.get_analog(pros::E_CONTROLLER_ANALOG_LEFT_Y) + master.get_analog(pros::E_CONTROLLER_ANALOG_RIGHT_X)) * 4.7244);
		right_motors.move_velocity((master.get_analog(pros::E_CONTROLLER_ANALOG_LEFT_Y) - master.get_analog(pros::E_CONTROLLER_ANALOG_RIGHT_X)) * 4.7244);


		if(master.get_digital_new_press(pros::E_CONTROLLER_DIGITAL_X)){
			clampToggle = !clampToggle;
			clamp.set_value(clampToggle);
		}

		if(master.get_digital_new_press(pros::E_CONTROLLER_DIGITAL_B)){
			clawToggle = !clawToggle;
			claw.set_value(clawToggle);
		}

		if(master.get_digital_new_press(pros::E_CONTROLLER_DIGITAL_Y)){
			doinkerToggle = !doinkerToggle;
			doinker.set_value(doinkerToggle);
		}

		if(master.get_digital_new_press(pros::E_CONTROLLER_DIGITAL_DOWN)){
			colorSort = !colorSort;
		}

		if(master.get_digital(pros::E_CONTROLLER_DIGITAL_R1) &&master.get_digital(pros::E_CONTROLLER_DIGITAL_R2)){
			intakeLeft.move_velocity(-200);
			intakeRight.move_velocity(-200);
		}
		else if(optical.get_hue() < 7 && colorSort){
			intakeLeft.move_velocity(-200);
			intakeRight.move_velocity(200);
		}
		else if(master.get_digital(pros::E_CONTROLLER_DIGITAL_R1)){
			intakeLeft.move_velocity(200);
			intakeRight.move_velocity(200);
		}
		else if(master.get_digital(pros::E_CONTROLLER_DIGITAL_R2)){
			intakeLeft.move_velocity(-200);
			intakeRight.move_velocity(200);
		}
		else{
			intakeLeft.move_velocity(0);
			intakeRight.move_velocity(0);
		}

		if(master.get_digital(pros::E_CONTROLLER_DIGITAL_L1)){
			armLeft.move_velocity(200);
			armRight.move_velocity(200);
		}
		else if(master.get_digital(pros::E_CONTROLLER_DIGITAL_L2)){
			armLeft.move_velocity(-70);
			armRight.move_velocity(-70);
		}
		else{
			armLeft.move_velocity(0);
			armRight.move_velocity(0);
		}
	}
}